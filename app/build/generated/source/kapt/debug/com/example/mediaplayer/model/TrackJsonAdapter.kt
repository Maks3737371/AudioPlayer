// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.mediaplayer.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class TrackJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Track>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "artist", "bitmapUri",
      "trackUri", "duration")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "duration")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Track").append(')') }

  public override fun fromJson(reader: JsonReader): Track {
    var title: String? = null
    var artist: String? = null
    var coverUrl: String? = null
    var trackUrl: String? = null
    var duration: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> artist = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("artist",
            "artist", reader)
        2 -> coverUrl = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("coverUrl",
            "bitmapUri", reader)
        3 -> trackUrl = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("trackUrl",
            "trackUri", reader)
        4 -> duration = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("duration",
            "duration", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Track(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        artist = artist ?: throw Util.missingProperty("artist", "artist", reader),
        coverUrl = coverUrl ?: throw Util.missingProperty("coverUrl", "bitmapUri", reader),
        trackUrl = trackUrl ?: throw Util.missingProperty("trackUrl", "trackUri", reader),
        duration = duration ?: throw Util.missingProperty("duration", "duration", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Track?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("artist")
    stringAdapter.toJson(writer, value_.artist)
    writer.name("bitmapUri")
    stringAdapter.toJson(writer, value_.coverUrl)
    writer.name("trackUri")
    stringAdapter.toJson(writer, value_.trackUrl)
    writer.name("duration")
    intAdapter.toJson(writer, value_.duration)
    writer.endObject()
  }
}
